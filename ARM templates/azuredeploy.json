{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "isNew": {
      "type": "string",
      "allowedValues": [
        "y",
        "n"
      ],
      "metadata": {
        "description": "Is new deployment (y/n)"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "_parameterType": "resourceGroup",
        "description": "Name of the resource group for the resource."
      }
    },
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "_parameterType": "location",
        "description": "Location of the resource."
      }
    }
    ,
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-appServicePlan')]",
      "minLength": 2,
      "metadata": {
        "description": "App service name."
      }
    },
    "functionAppServicePlanName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-functionAppServicePlan')]",
      "minLength": 2,
      "metadata": {
        "description": "Function App service plan name."
      }
    },
    "webAppName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-webApp')]",
      "minLength": 2,
      "metadata": {
        "description": "Web app name."
      }
    },
    "apiAppName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-apiApp')]",
      "minLength": 2,
      "metadata": {
        "description": "Api app name."
      }
    },
    "stockFunctionAppName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-stockFunctionApp')]",
      "minLength": 2,
      "metadata": {
        "description": "Stock function app name."
      }
    },
    "deliveryFunctionAppName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-deliveryFunctionApp')]",
      "minLength": 2,
      "metadata": {
        "description": "Delivery function app name."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "F1",
      "metadata": {
        "description": "The SKU of App Service Plan."
      }
    },
    "language": {
      "type": "string",
      "defaultValue": ".net",
      "allowedValues": [
        ".net",
        "php",
        "node",
        "html"
      ],
      "metadata": {
        "description": "The language stack of the app."
      }
    },
    "currentStack":{
      "type": "string",
      "defaultValue": "dotnet",
      "metadata": {
        "description": "Current stack"
      }
    },
    "netFrameworkVersion": {
      "type": "string",
      "defaultValue": "v5.0",
      "metadata": {
        "descritpion": "DotNet framework version"
      }
    },
    "databaseAccountName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-cosmosAccount-ss')]",
      "metadata": {
        "description": "Cosmos DB account name"
      }
    },    
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'blobAccount')]",
      "metadata": {
        "description": "Blob account name"
      }
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "Core (SQL) database name"
      }
    },
    "storageName": {
      "type": "string",
      "metadata": {
        "description": "The name for the Function storage "
      }
    },
    "containers": {
      "type": "array",
      "metadata": {
        "description": "List of containers in cosmos database"
      }
    },
    "sqlServerName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-sqlServer-ss')]",
      "metadata": {
        "description": "SQL Server name"
      }
    },
    "sqlServerAdministratorName": {
      "type": "string",
      "metadata": {
        "description": "SQL Server Administrator name"
      }
    },
    "sqlServerAdministratorPassword": {
      "type": "string",
      "metadata": {
        "description": "SQL Server Administrator password"
      }
    },
     "environments": {
      "defaultValue": [
        "Dev"
      ],
      "type": "array",
      "metadata": {
        "description": "Array with the names for the environment slots"
      },
      "maxLength": 19
    },
    "serviceBusNamespaceName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourceGroupName'),'-servicebusnamespace-ss')]",
      "metadata": {
        "description": "Service Bus Namespace name"
      }
    },
    "serviceBusQueueName": {
      "type": "string",
      "defaultValue": "OrderItems",
      "metadata": {
        "description": "Service Bus Namespace name"
      }
    }
  },
  "variables": {
    "databaseAccountName_var": "[toLower(parameters('databaseAccountName'))]",
    "storageAccountName_var": "[replace(toLower(parameters('storageAccountName')), '-', '')]",
    "webAppkeyVaultName-Prod": "[toLower('WebSiteKeyVaultProd')]",
    "apiAppkeyVaultName-Prod": "[toLower('ApiKeyVaultProd')]",
    "stockFunctionAppKeyVaultName-Prod": "[toLower('StockFuncKeyVaultProd')]",
    "deliveryFunctionAppKeyVaultName-Prod": "[toLower('DeliveryFuncKeyVaultProd')]",
    "appInsightsName": "[concat(parameters('resourceGroupName'), '-ApplicationInsights')]",
    "deliveryFunction": "DeliveryOrder",
    "reserveOrderFunction": "ReserveOrder"
  },
  "resources": [
    {
      "comments": "Application Insights",
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "location": "[parameters('resourceLocation')]",      
      "properties": {
      "Application_Type": "web",
      "ApplicationId": "[variables('appInsightsName')]"
      }
    },
    {
      "comments": "Sql Server",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2020-02-02-preview",
      "name": "[parameters('sqlServerName')]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdministratorName')]",
        "administratorLoginPassword": "[parameters('sqlServerAdministratorPassword')]"
      },
      "resources": [
        {
          "comments": "Catalog Database",
          "type": "databases",
          "apiVersion": "2020-08-01-preview",
          "name": "[concat(parameters('sqlServerName'), '-Catalog')]",
          "location": "[parameters('resourceLocation')]",
          "sku": {
            "name": "Standard",
            "tier": "Standard"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', concat(parameters('sqlServerName')))]"
          ]          
        },
        {
          "comments": "Identity Database",
          "type": "databases",
          "apiVersion": "2020-08-01-preview",
          "name": "[concat(parameters('sqlServerName'), '-Identity')]",
          "location": "[parameters('resourceLocation')]",
          "sku": {
            "name": "Standard",
            "tier": "Standard"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', concat(parameters('sqlServerName')))]"
          ]
        },
        {
          "comments": "Firewall Rules",
          "apiVersion": "2021-02-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
          ],
          "location": "[parameters('resourceLocation')]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
        },
          "type": "firewallrules"
        }
      ]
    },
    {
      "comments": "App Service Plan for Web and Api applications",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "location": "[parameters('resourceLocation')]",
      "name": "[parameters('appServicePlanName')]",
      "sku": {
        "name": "[parameters('sku')]"
      }
    },
    {
      "comments": "Web site web app",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[parameters('webAppName')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('resourceLocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "properties": {
        "siteConfig": {           
          "appSettings": [
            {
              "name": "keyVaultName",
              "value": "[variables('webAppkeyVaultName-Prod')]"
            }
          ],
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "[parameters('currentStack')]"
            }
          ],
          "netFrameworkVersion": "[parameters('netFrameworkVersion')]"
        },
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
      }
    },
    {
      "comments": "Api web app",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[parameters('apiAppName')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('resourceLocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "properties": {
        "siteConfig": {          
          "appSettings": [
            {
              "name": "keyVaultName",
              "value": "[variables('apiAppkeyVaultName-Prod')]"
            }
          ],
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "[parameters('currentStack')]"
            }
          ],
          "netFrameworkVersion": "[parameters('netFrameworkVersion')]"
        },
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
      }
    },
    {
      "comments": "Storage account",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName_var')]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {}
    },
    {
      "comments": "Cosmos database account",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-04-15",
      "name": "[variables('databaseAccountName_var')]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "enableFreeTier": true,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('resourceLocation')]"
          }
        ]
      }
    },
    {
      "comments": "Cosmos database",
      "type": "Microsoft.DocumentDB/databaseAccounts/apis/databases",
      "name": "[concat(variables('databaseAccountName_var'), '/sql/', parameters('databaseName'))]",
      "apiVersion": "2016-03-31",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/', variables('databaseAccountName_var'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('databaseName')]"
        },
        "options": {
          "throughput": 400
        }
      }
    },
    {
      "comments": "Cosmos database container",
      "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
      "name": "[concat(variables('databaseAccountName_var'), '/sql/', parameters('databaseName'), '/', parameters('containers')[copyIndex()].name)]",
      "copy": {
        "name": "ContainerCopy",
        "count": "[length(parameters('containers'))]"
      },
      "apiVersion": "2016-03-31",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName_var'), 'sql', parameters('databaseName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('containers')[copyIndex()].name]",
          "partitionKey": {
            "paths": ["[parameters('containers')[copyIndex()].partitionKey]"],
            "kind": "hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent"
          }
        }
      }
    },  
    {
      "comments": "App Service plan for function apps",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "name": "[parameters('functionAppServicePlanName')]",
      "location": "[parameters('resourceLocation')]",      
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[parameters('functionAppServicePlanName')]",
        "computeMode": "Dynamic"
      }
    },
    {
      "comments": "Stock Function App",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[parameters('stockFunctionAppName')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('resourceLocation')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName_var'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "keyVaultName",
              "value": "[variables('stockFunctionAppKeyVaultName-Prod')]"
            }
          ],
          "netFrameworkVersion": "[parameters('netFrameworkVersion')]"
        }
      }
    },     
    {
      "comments": "Delivery Function App",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[parameters('deliveryFunctionAppName')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('resourceLocation')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName_var'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {          
              "name": "keyVaultName",
              "value": "[variables('deliveryFunctionAppKeyVaultName-Prod')]"
            }
          ],
          "netFrameworkVersion": "[parameters('netFrameworkVersion')]"
        }
      }
    },       
    {
      "comments": "Conditional delivery function used to fill function key",
      "condition": "[equals(parameters('isNew'), 'y')]",
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-12-01",
      "name": "[concat(parameters('deliveryFunctionAppName'), '/', variables('deliveryFunction'))]",
      "properties": {
        "config": {
          "disabled": false,
          "bindings": [
            {
              "name": "req",
              "type": "httpTrigger",
              "direction": "in",
              "authLevel": "function",
              "methods": [
                "get"
              ]
            },
            {
              "name": "$return",
              "type": "http",
              "direction": "out"
            }
          ]
        },
        "files": {
          "run.csx": "#r \"Newtonsoft.Json\"\r\n\r\nusing System.Net;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Primitives;\r\nusing Newtonsoft.Json;\r\n\r\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\r\n{\r\n      log.LogInformation(\"C# HTTP trigger function processed a request.\");\r\n\r\n    string name = req.Query[\"name\"];\r\n\r\n    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\r\n    dynamic data = JsonConvert.DeserializeObject(requestBody);\r\n    name = name ?? data?.name;\r\n\r\n    string responseMessage = string.IsNullOrEmpty(name)\r\n        ? \"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\"\r\n                : $\"Hello, {name}. This HTTP triggered function executed successfully.\";\r\n\r\n            return new OkObjectResult(responseMessage);\r\n}"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('deliveryFunctionAppName'))]"
      ]
    },
    {
      "comments": "Service Bus Namespace",
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[parameters('serviceBusNamespaceName')]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {}
    },
    {
      "comments": "Order Items Queue",
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2017-04-01",
      "name": "[format('{0}/{1}', parameters('serviceBusNamespaceName'), parameters('serviceBusQueueName'))]",
      "properties": {
        "lockDuration": "PT5M",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
        "deadLetteringOnMessageExpiration": false,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
        "enablePartitioning": false,
        "enableExpress": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]"
      ]
    },
  {
    "comments": "Web site web app KeyVault",
    "name": "[variables('webAppkeyVaultName-Prod')]",
    "type": "Microsoft.KeyVault/vaults",
    "apiVersion": "2019-09-01",
    "location": "[resourceGroup().location]",
    "tags": {
      "displayName": "[variables('webAppkeyVaultName-Prod')]"
    },
    "properties": {
      "enabledForDeployment": true,
      "enabledForTemplateDeployment": true,
      "enabledForDiskEncryption": true,
      "tenantId": "[subscription().tenantId]",
      "accessPolicies": [
        {
          "tenantId": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2018-02-01', 'Full').identity.tenantId]",
          "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2018-02-01', 'Full').identity.principalId]",
          "permissions": {
            "keys": [
              "Get"
            ],
            "secrets": [
              "List",
              "Get"
            ]
          }
        }
      ],
      "sku": {
        "name": "standard",
        "family": "A"
      }
    },
    "resources": [
      {
        "type": "secrets",
        "name": "ConnectionStrings--CatalogConnection",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]",
          "[resourceId('Microsoft.Sql/servers', concat(parameters('sqlServerName')))]"
        ],
        "properties": {
          "value": "[concat('Server=tcp:',reference(parameters('sqlServerName')).fullyQualifiedDomainName,',1433;Initial Catalog=',concat(parameters('sqlServerName'), '-Catalog'),';Persist Security Info=False;User ID=',reference(parameters('sqlServerName')).administratorLogin,';Password=',parameters('sqlServerAdministratorPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
        }
      },
      {
        "type": "secrets",
        "name": "ConnectionStrings--IdentityConnection",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]",
          "[resourceId('Microsoft.Sql/servers', concat(parameters('sqlServerName')))]"
        ],
        "properties": {
          "value": "[concat('Server=tcp:',reference(parameters('sqlServerName')).fullyQualifiedDomainName,',1433;Initial Catalog=',concat(parameters('sqlServerName'), '-Identity'),';Persist Security Info=False;User ID=',reference(parameters('sqlServerName')).administratorLogin,';Password=',parameters('sqlServerAdministratorPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
        }
      },
      {
        "type": "secrets",
        "name": "webBase",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2018-02-01').hostnames[0]]"
        }
      },  
      {
        "type": "secrets",
        "name": "DeliveryOrderReserverConfiguration--FunctionBaseUrl",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[concat(reference(resourceId('Microsoft.Web/sites', parameters('deliveryFunctionAppName')), '2018-02-01').hostnames[0], '/api/')]"
        }
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "DeliveryOrderReserverConfiguration--FunctionKey",
        "properties": {
          "value": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', parameters('deliveryFunctionAppName'))), '2020-12-01').functionKeys.default]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', parameters('deliveryFunctionAppName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ]
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "ApplicationInsights--InstrumentationKey",
        "properties": {
          "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ]
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "OrderItemsReserverConfig--ConnectionString",
        "properties": {
          "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules',parameters('serviceBusNamespaceName'),'RootManageSharedAccessKey'),'2015-08-01').primaryConnectionString]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ]
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "OrderItemsReserverConfig--QueueName",
        "properties": {
          "value": "[parameters('serviceBusQueueName')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('serviceBusNamespaceName'), parameters('serviceBusQueueName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ]
      }
    ]
  },
  {
    "comments": "Api app KeyVault",
    "name": "[variables('apiAppkeyVaultName-Prod')]",
    "type": "Microsoft.KeyVault/vaults",
    "apiVersion": "2019-09-01",
    "location": "[resourceGroup().location]",
    "tags": {
      "displayName": "[variables('apiAppkeyVaultName-Prod')]"
    },
    "properties": {
      "enabledForDeployment": true,
      "enabledForTemplateDeployment": true,
      "enabledForDiskEncryption": true,
      "tenantId": "[subscription().tenantId]",
      "accessPolicies": [        
        {
          "tenantId": "[reference(resourceId('Microsoft.Web/sites', parameters('apiAppName')), '2018-02-01', 'Full').identity.tenantId]",
          "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('apiAppName')), '2018-02-01', 'Full').identity.principalId]",
          "permissions": {
            "keys": [
              "Get"
            ],
            "secrets": [
              "List",
              "Get"
            ]
          }
        }
      ],
      "sku": {
        "name": "standard",
        "family": "A"
      }
    },
    "resources": [
      {
        "type": "secrets",
        "name": "ConnectionStrings--CatalogConnection",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('apiAppkeyVaultName-Prod'))]",
          "[resourceId('Microsoft.Sql/servers', concat(parameters('sqlServerName')))]"
        ],
        "properties": {
          "value": "[concat('Server=tcp:',reference(parameters('sqlServerName')).fullyQualifiedDomainName,',1433;Initial Catalog=',concat(parameters('sqlServerName'), '-Catalog'),';Persist Security Info=False;User ID=',reference(parameters('sqlServerName')).administratorLogin,';Password=',parameters('sqlServerAdministratorPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
        }
      },
      {
        "type": "secrets",
        "name": "ConnectionStrings--IdentityConnection",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('apiAppkeyVaultName-Prod'))]",
          "[resourceId('Microsoft.Sql/servers', concat(parameters('sqlServerName')))]"
        ],
        "properties": {
          "value": "[concat('Server=tcp:',reference(parameters('sqlServerName')).fullyQualifiedDomainName,',1433;Initial Catalog=',concat(parameters('sqlServerName'), '-Identity'),';Persist Security Info=False;User ID=',reference(parameters('sqlServerName')).administratorLogin,';Password=',parameters('sqlServerAdministratorPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
        }
      },
      {
        "type": "secrets",
        "name": "baseUrls--webBase1",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('apiAppkeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2018-02-01').hostnames[0]]"
        }
      },
      {
        "type": "secrets",
        "name": "baseUrls--webBase2",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('apiAppkeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2018-02-01').hostnames[0]]"
        }
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "ApplicationInsights--InstrumentationKey",
        "properties": {
          "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('apiAppkeyVaultName-Prod'))]"
        ]
      }
    ]
  },
  {
    "comments": "Stock function app KeyVault",
    "name": "[variables('stockFunctionAppKeyVaultName-Prod')]",
    "type": "Microsoft.KeyVault/vaults",
    "apiVersion": "2019-09-01",
    "location": "[resourceGroup().location]",
    "tags": {
      "displayName": "[variables('stockFunctionAppKeyVaultName-Prod')]"
    },
    "properties": {
      "enabledForDeployment": true,
      "enabledForTemplateDeployment": true,
      "enabledForDiskEncryption": true,
      "tenantId": "[subscription().tenantId]",
      "accessPolicies": [        
        {
          "tenantId": "[reference(resourceId('Microsoft.Web/sites', parameters('stockFunctionAppName')), '2018-02-01', 'Full').identity.tenantId]",
          "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('stockFunctionAppName')), '2018-02-01', 'Full').identity.principalId]",
          "permissions": {
            "keys": [
              "Get"
            ],
            "secrets": [
              "List",
              "Get"
            ]
          }
        }
      ],
      "sku": {
        "name": "standard",
        "family": "A"
      }
    },
    "resources": [
      {
        "type": "secrets",
        "name": "AzureWebJobsStorage",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('stockFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName_var'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName_var')), '2019-06-01').keys[0].value)]"
        }
      },      
      {
        "type": "secrets",
        "name": "FUNCTIONS--WORKER--RUNTIME",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('stockFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "dotnet"
        }
      },
      {
        "type": "secrets",
        "name": "WEBSITE--CONTENTAZUREFILECONNECTIONSTRING",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('stockFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName_var'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName_var')), '2019-06-01').keys[0].value)]"
        }
      },
      {
        "type": "secrets",
        "name": "WEBSITE--CONTENTSHARE",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('stockFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[parameters('stockFunctionAppName')]"
        }
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "ApplicationInsights--InstrumentationKey",
        "properties": {
          "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('stockFunctionAppKeyVaultName-Prod'))]"
        ]
      },{
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "ServiceBusConnection",
        "properties": {
          "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules',parameters('serviceBusNamespaceName'),'RootManageSharedAccessKey'),'2015-08-01').primaryConnectionString]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ]
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "QueueName",
        "properties": {
          "value": "[parameters('serviceBusQueueName')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('serviceBusNamespaceName'), parameters('serviceBusQueueName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('webAppkeyVaultName-Prod'))]"
        ]
      }
    ]
  },
  {
    "comments": "Delivery function app KeyVault",
    "name": "[variables('deliveryFunctionAppKeyVaultName-Prod')]",
    "type": "Microsoft.KeyVault/vaults",
    "apiVersion": "2019-09-01",
    "location": "[resourceGroup().location]",
    "tags": {
      "displayName": "[variables('deliveryFunctionAppKeyVaultName-Prod')]"
    },
    "properties": {
      "enabledForDeployment": true,
      "enabledForTemplateDeployment": true,
      "enabledForDiskEncryption": true,
      "tenantId": "[subscription().tenantId]",
      "accessPolicies": [        
        {
          "tenantId": "[reference(resourceId('Microsoft.Web/sites', parameters('deliveryFunctionAppName')), '2018-02-01', 'Full').identity.tenantId]",
          "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('deliveryFunctionAppName')), '2018-02-01', 'Full').identity.principalId]",
          "permissions": {
            "keys": [
              "Get"
            ],
            "secrets": [
              "List",
              "Get"
            ]
          }
        }
      ],
      "sku": {
        "name": "standard",
        "family": "A"
      }
    },
    "resources": [
      {
        "type": "secrets",
        "name": "AzureWebJobsStorage",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName_var'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName_var')), '2019-06-01').keys[0].value)]"
        }
      },
      {
        "type": "secrets",
        "name": "CosmosDbConnectionString",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[concat('AccountEndpoint=https://', variables('databaseAccountName_var'),'.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccountName_var')), '2019-08-01').primaryMasterKey, ';')]"
        }
      },
      {
        "type": "secrets",
        "name": "FUNCTIONS--WORKER--RUNTIME",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "dotnet"
        }
      },
      {
        "type": "secrets",
        "name": "WEBSITE--CONTENTAZUREFILECONNECTIONSTRING",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName_var'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName_var')), '2019-06-01').keys[0].value)]"
        }
      },
      {
        "type": "secrets",
        "name": "WEBSITE--CONTENTSHARE",
        "apiVersion": "2016-10-01",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryFunctionAppKeyVaultName-Prod'))]"
        ],
        "properties": {
          "value": "[parameters('stockFunctionAppName')]"
        }
      },
      {
        "type": "secrets",
        "apiVersion": "2019-09-01",
        "name": "ApplicationInsights--InstrumentationKey",
        "properties": {
          "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryFunctionAppKeyVaultName-Prod'))]"
        ]
      }
    ]
  }
  ]
}